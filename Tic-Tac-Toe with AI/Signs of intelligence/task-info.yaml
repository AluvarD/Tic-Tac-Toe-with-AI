type: edu
custom_name: stage4
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import com.google.gson.internal.$Gson$Preconditions;
    import org.assertj.core.util.Lists;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.TestPassed;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = field;
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 0;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y++;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }
    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() throws Exception {
            super(Main.class);
        }

        static String[] inputs = new String[]{
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @DynamicTestingMethod
        CheckResult autoTest() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("start easy easy");
            if (!(output.toLowerCase().contains("wins") || output.toLowerCase().contains("draw"))) {
                return CheckResult.wrong("The game was not finished (your program did not print the result of the game).");
            }

            List<TicTacToeField> fields = TicTacToeField.parseAll(output);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            return CheckResult.correct();
        }

        // Simple test
        @DynamicTestingMethod
        CheckResult manualTest1() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            main.execute("start user user");

            CheckResult temp;
            if ((temp = assertPosition(main, 0, 0, "x")) != null) return temp;
            if ((temp = assertPosition(main, 1, 2, "o")) != null) return temp;
            if ((temp = assertPosition(main, 1, 0, "x")) != null) return temp;
            if ((temp = assertPosition(main, 2, 2, "o")) != null) return temp;
            String output = main.execute("3 1");
            if (!output.contains("wins") || !output.toLowerCase().contains("x")) {
                return CheckResult.wrong("A win message was expected, but the game didn't stop.");
            }

            return CheckResult.correct();
        }

        // checking overlapping
        @DynamicTestingMethod
        CheckResult manualTest2() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            main.execute("start user user");
            CheckResult temp;
            String output;

            if ((temp = assertPosition(main, 0, 0, "x")) != null) return temp;
            output = main.execute("1 1");
            if (output.split("\n").length > 3) {
                return CheckResult.wrong("We placed a symbol to an occupied cell, but your program didn't warned about it.");
            }
            output = main.execute("1 2");
            TicTacToeField ticTacToeField = TicTacToeField.parse(output);
            if (ticTacToeField == null) {
                return CheckResult.wrong("The game field is incorrect");
            }
            if (!ticTacToeField.field[0][0].toString().toLowerCase().equals("x")) {
                return CheckResult.wrong("The \"O\" symbol overlapped the \"X\" one.");
            }

            return CheckResult.correct();
        }

        //exit check
        @DynamicTestingMethod
        CheckResult exitCheck(){
            TestedProgram main = new TestedProgram(Main.class);
            main.start();

            main.execute("exit");
            if (!main.isFinished()){
                return CheckResult.wrong("Your program did't finish after \"exit\" command");
            }

            return CheckResult.correct();
        }

        CheckResult assertPosition(TestedProgram program, int a, int b, String mode) {
            String output = program.execute((a + 1) + " " + (b + 1));
            TicTacToeField field = TicTacToeField.parse(output);

            if (field == null) {
                return CheckResult.wrong("The game field is incorrect");
            }
            try {
                if (!field.field[a][b].toString().toLowerCase().equals(mode)) {
                    return CheckResult.wrong("The " + mode.toUpperCase() + " was placed to a wrong position." +
                        "The " + mode.toUpperCase() + " symbol was not found (" + field.field[a][b] + " instead of it).");
                }
            } catch (NullPointerException nullPointerException) {
                return CheckResult.wrong("The error in the game field caused an exception in the testing system.");
            }

            return null;
        }

        @DynamicTestingMethod
        CheckResult testOfEasyDifficulty() {
            int win = 0, draw = 0, lose = 0;
            int result;
            for (int i = 0; i < 50; i++) {
                result = testGameSession("easy");
                if (result == -1) {
                    return CheckResult.wrong("An error in process of the game was found");
                } else if (result == -2){
                    return CheckResult.wrong("Test bot ran out of input");
                } else if (result == 0) {
                    draw++;
                } else if (result == 1) {
                    win++;
                } else if (result == 2) {
                    lose++;
                }
            }
            if (win > 13) {
                return CheckResult.correct();
            } else {
                return CheckResult.wrong("The difficulty of your AI is too high." +
                    "Make it easier.\n" +
                    "If you are sure the AI difficulty is fine, try to rerun the test.");
            }
        }

        @DynamicTestingMethod
        CheckResult testOfMediumDifficulty(){
            int win = 0, draw = 0, lose = 0;
            int result;
            for (int i = 0; i < 50; i++) {
                result = testGameSession("medium");
                if (result == -1) {
                    return CheckResult.wrong("An error in process of the game was found");
                } else if (result == 0) {
                    draw++;
                } else if (result == 1) {
                    win++;
                } else if (result == 2) {
                    lose++;
                }
            }
            if (win > 10) {
                return CheckResult.correct();
            } else {
                return CheckResult.wrong("The difficulty of your AI is too high. " +
                    "Try to make it easier.\n" +
                    "If you are sure the AI difficulty is fine, try to rerun the test.");
            }
        }

        int testGameSession(String mode) {
            List<String> inputs = Lists.newArrayList(
                "1 1", "1 2", "1 3",
                "2 1", "2 2", "2 3",
                "3 1", "3 2", "3 3");

            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("start " + mode + " " + mode);

            while (!main.isFinished()) {
                if (output.contains("command:")){
                    break;
                }
                int randomIndex = new Random().nextInt(inputs.size());
                output = main.execute(inputs.get(randomIndex));
                inputs.remove(randomIndex);
                if (inputs.isEmpty()){
                    return -2;
                }
            }

            if (!(output.toLowerCase().contains("wins") || output.toLowerCase().contains("draw"))) {
                return -1;
            }

            if (output.toLowerCase().contains("x wins")) {
                return 1;
            } else if (output.toLowerCase().contains("o wins")) {
                return 2;
            } else if (output.toLowerCase().contains("draw")) {
                return 0;
            }

            main.stop();
            return -1;
        }
    }
  learner_created: false
- name: src/tictactoe/GameChecks.java
  visible: true
  text: |
    package tictactoe;

    public class GameChecks {
        public static int checkTurn (char[][] table) {
            int xCount = 0;
            int oCount = 0;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (table[i][j] == 'X') {
                        xCount++;
                    } else if (table[i][j] == 'O'){
                        oCount++;
                    }
                }
            }
            if (xCount > oCount) {
                return 1;
            } else {
                return 0;
            }
        }

        public static int checkCoordinates (char[][] table, String x, String y) {
            if (!checkString(x) || !checkString(y)) {
                return 1;
            } else if (Integer.parseInt(x) > 3 || Integer.parseInt(y) > 3){
                return 2;
            } else if (table[Integer.parseInt(x) - 1][Integer.parseInt(y) - 1] == 'X' || table[Integer.parseInt(x) - 1][Integer.parseInt(y) - 1] == 'O') {
                return 3;
            }
            return 0;
        }

        public static boolean checkString(String string) {
            if (string == null || string.length() == 0) return false;

            int i = 0;
            if (string.charAt(0) == '-') {
                if (string.length() == 1) {
                    return false;
                }
                i = 1;
            }

            char c;
            for (; i < string.length(); i++) {
                c = string.charAt(i);
                if (!(c >= '0' && c <= '9')) {
                    return false;
                }
            }
            return true;
        }

        public static int checkGameResult (char[][] table) {
            int result = 0;

            for (int i = 0; i < 3; i++) {
                if (checkVertical(table, i, 'X')) {
                    result = 1;
                    break;
                } else if (checkHorizontal(table, i, 'X')) {
                    result = 1;
                    break;
                } else if (checkVertical(table, i, 'O')) {
                    result = 2;
                    break;
                } else if (checkHorizontal(table, i, 'O')) {
                    result = 2;
                    break;
                }
            }

            if (result == 0) {
                if (checkDiagonal(table, 'X')) {
                    result = 1;
                } else if (checkDiagonal(table, 'O')) {
                    result = 2;
                } else if (drawCheck(table)) {
                    result = 3;
                }
            }
            return result;
        }

        public static boolean checkVertical (char[][] table, int vertical, char value) {
            if (table[0][vertical] == value && table[1][vertical] == value && table[2][vertical] == value) {
                return true;
            } else {
                return false;
            }
        }

        public static boolean checkHorizontal (char[][] table, int horizontal, char value) {
            if (table[horizontal][0] == value && table[horizontal][1] == value && table[horizontal][2] == value) {
                return true;
            } else {
                return false;
            }
        }

        public static boolean checkDiagonal (char[][] table, char value) {
            if (table[0][0] == value && table[1][1] == value && table[2][2] == value) {
                return true;
            } else if (table[2][0] == value && table[1][1] == value && table[0][2] == value) {
                return true;
            } else {
                return false;
            }
        }

        public static boolean drawCheck (char[][] table) {
            int hollowPlace = 0;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (table[i][j] == '_') {
                        hollowPlace++;
                    }
                }
            }
            if (hollowPlace == 0) {
                return true;
            } else {
                return false;
            }
        }
    }
  learner_created: true
- name: src/tictactoe/GameProgress.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    public class GameProgress {

        public static void game (String mode) {
            char[][] table = new char[3][3];
            String startLine = "_________";

            Table.tableInit(table, startLine);
            Table.printTable(table);

            int move = 0;
            while (true) {
                move = GameChecks.checkTurn(table);
                String input = gameProcess(mode, move, table);

                String[] convert = input.split(" ");
                String[] inputArray = {"0", "0"};

                for (int i = 0; i < convert.length; i++) {
                    inputArray[i] = convert[i];
                }

                String x = inputArray[0];
                String y = inputArray[1];

                if (GameChecks.checkCoordinates(table, x, y) == 2) {
                    System.out.println("Coordinates should be from 1 to 3!");
                } else if (GameChecks.checkCoordinates(table, x, y) == 1) {
                    System.out.println("You should enter numbers!");
                } else if (GameChecks.checkCoordinates(table, x, y) == 3) {
                    System.out.println("This cell is occupied! Choose another one!");
                } else {
                    Table.changeInTable(table, Integer.parseInt(x), Integer.parseInt(y), move);
                    Table.printTable(table);
                }

                int result = GameChecks.checkGameResult(table);
                if (result == 1) {
                    System.out.println("X wins");
                    break;
                } else if (result == 2) {
                    System.out.println("O wins");
                    break;
                } else if (result == 3) {
                    System.out.println("Draw");
                    break;
                }
            }
        }

        public static String gameProcess (String mode, int move, char[][] table) {
            Scanner scanner = new Scanner(System.in);
            String input = new String();
            switch (mode) {
                case "aiVUserEasy":
                    if (move == 0) {
                        System.out.print("Enter the coordinates: > ");
                        input = scanner.nextLine();
                    } else if (move == 1) {
                        System.out.print("Making move level \"easy\"\n");
                        input = Ai.generateCoordinatesAiEasy(table);
                    }
                    break;
                case "aiVAiEasy":
                    if (move == 0) {
                        System.out.print("Making move level \"easy\"\n");
                        input = Ai.generateCoordinatesAiEasy(table);
                    } else if (move == 1) {
                        System.out.print("Making move level \"easy\"\n");
                        input = Ai.generateCoordinatesAiEasy(table);
                    }
                    break;
                case "pVp":
                    if (move == 0) {
                        System.out.print("Enter the coordinates: > ");
                        input = scanner.nextLine();
                    } else if (move == 1) {
                        System.out.print("Enter the coordinates: > ");
                        input = scanner.nextLine();
                    }
                    break;
            }
            return input;
        }
    }
  learner_created: true
- name: src/tictactoe/Table.java
  visible: true
  text: |
    package tictactoe;

    public class Table {

        public static void tableInit (char[][] table, String startLine) {
            int stringIndex = 0;
            char[] startLineArray = startLine.toCharArray();
            for (int i = 0; i < 3; i ++) {
                for (int j = 0; j < 3; j ++) {
                    table[i][j] = startLineArray[stringIndex];
                    stringIndex++;
                }
            }
        }

        public static void printTable (char[][] table) {
            System.out.println("---------");
            System.out.print("| ");
            for (int i = 0; i < 3; i++) {
                if (table[0][i] == '_') {
                    System.out.print("  ");
                } else {
                    System.out.print(table[0][i] + " ");
                }
            }
            System.out.println("|");
            System.out.print("| ");
            for (int i = 0; i < 3; i++) {
                if (table[1][i] == '_') {
                    System.out.print("  ");
                } else {
                    System.out.print(table[1][i] + " ");
                }
            }
            System.out.println("|");
            System.out.print("| ");
            for (int i = 0; i < 3; i++) {
                if (table[2][i] == '_') {
                    System.out.print("  ");
                } else {
                    System.out.print(table[2][i] + " ");
                }
            }
            System.out.println("|");
            System.out.println("---------");
        }

        public static void changeInTable (char[][] table, int x, int y, int move) {
            if (move % 2 == 0) {
                table[x - 1][y - 1] = 'X';
            } else {
                table[x - 1][y - 1] = 'O';
            }
        }
    }
  learner_created: true
- name: src/tictactoe/Ai.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;

    public class Ai {
        public static String generateCoordinatesAiEasy (char[][] table) {
            int x;
            int y;
            Random random = new Random();
            StringBuilder coordinateArray = new StringBuilder();
            do {
                x = random.nextInt(2 + 1);
                y = random.nextInt(2 + 1);
                x += 1;
                y += 1;
                //System.out.println("x: " + x + " y: " + y);
            } while (GameChecks.checkCoordinates(table, String.valueOf(x), String.valueOf(y)) != 0);
            //System.out.println("Final x: " + x + " Final y: " + y);
            coordinateArray.append(x).append(" ").append(y);
            return coordinateArray.toString();
        }
    }
  learner_created: true
- name: src/tictactoe/GameMode.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    public class GameMode {
        public static String mode() {
            Scanner scanner = new Scanner(System.in);
            String input;
            String mode = "exit";
            boolean checkInput = false;

            do {
                System.out.print("Input command: > ");
                input = scanner.nextLine();
                switch (input) {
                    case "start easy easy":
                        checkInput = true;
                        mode = "aiVAiEasy";
                        break;
                    case "start easy user":
                        checkInput = true;
                        mode = "aiVUserEasy";
                        break;
                    case "start user user":
                        checkInput = true;
                        mode = "pVp";
                        break;
                    case "exit":
                        checkInput = true;
                        break;
                    default:
                        System.out.println("Bad parameters!");
                        break;
                }
            } while (!checkInput);
            return mode;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/450/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 06 Jan 2021 17:09:34 UTC
record: 4
